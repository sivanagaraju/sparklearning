from __future__ import print_function
import sys
from pyspark.sql import SparkSession


# DEFINE your input path
input_path = sys.argv[1]
print("input_path: ", input_path)
# input_path:  pagerank_data_2.txt

# DEFINE number of iterations
ITERATIONS = int(sys.argv[2])
print("ITERATIONS: ", ITERATIONS)
# ITERATIONS:  40

# Create an instance of a SparkSession object
spark = SparkSession.builder.getOrCreate()

# Read adjacency list and create RDD[String]
matrix = spark.sparkContext.textFile(input_path)
print("matrix=", matrix.collect())
#matrix= ['A B C D', 'B C E', 'C A D E', 'D E', 'E B']


# Page Rank algorithm is implemented in 3 steps:
#
#  Step-1: Map: For each node i, calculate vote (Ri/Di) 
#          for each out-link of i and propagate to 
#          adjacent nodes.
#  Step-2: Reduce: For each node i, sum the upcoming  
#          votes and update Rank value (Ri).
#
# Step-3: Repeat this Map-Reduce step (Step-1 and Step-2) 
#         until Rank values converge (stable or within a margin).

# x = "A B C"
# returns (A, [B, C])
def create_pair(x):
  tokens = x.split(" ")
  # tokens[0] : source node
  # tokens[1:] : target nodes (links from the source node)
  return (tokens[0], tokens[1:])
#end-def

## links = matrix.map(lambda x: (x.split(' ')[0], x.split(' ')[1:]))
# create links from soure node to target nodes
links = matrix.map(create_pair)
print("links=", links.collect())
#links= [('A', ['B', 'C', 'D']), ('B', ['C', 'E']), ('C', ['A', 'D', 'E']), ('D', ['E']), ('E', ['B'])]

# Find node count
N = links.count()
print("node count N=", N)
# node count N= 5

# Create and initialize the ranks
ranks = links.map(lambda node: (node[0], 1.0/N))
print("ranks=", ranks.collect())
#ranks= [('A', 0.2), ('B', 0.2), ('C', 0.2), ('D', 0.2), ('E', 0.2)]



for i in range(ITERATIONS):
  # Join graph info with rank info and propogate to 
  # all neighbors rank scores (rank/(number of neighbors)
  # And add up ranks from all in-coming edges
  ranks = links.join(ranks)\
    .flatMap(lambda x : [(i, float(x[1][1])/len(x[1][0])) for i in x[1][0]])\
    .reduceByKey(lambda x,y: x+y)
  print(ranks.sortByKey().collect())
  
    
"""
sample output:
  
[('A', 0.06666666666666667), ('B', 0.26666666666666666), ('C', 0.16666666666666669), ('D', 0.13333333333333333), ('E', 0.3666666666666667)]
[('A', 0.05555555555555556), ('B', 0.3888888888888889), ('C', 0.15555555555555556), ('D', 0.07777777777777778), ('E', 0.32222222222222224)]
[('A', 0.05185185185185185), ('B', 0.3407407407407408), ('C', 0.21296296296296297), ('D', 0.07037037037037037), ('E', 0.32407407407407407)]
[('A', 0.07098765432098765), ('B', 0.341358024691358), ('C', 0.18765432098765433), ('D', 0.0882716049382716), ('E', 0.3117283950617284)]
[('A', 0.06255144032921811), ('B', 0.3353909465020576), ('C', 0.19434156378600823), ('D', 0.08621399176954733), ('E', 0.32150205761316875)]
[('A', 0.06478052126200275), ('B', 0.34235253772290813), ('C', 0.18854595336076815), ('D', 0.08563100137174212), ('E', 0.3186899862825789)]
[('A', 0.06284865112025605), ('B', 0.34028349336991315), ('C', 0.1927697759487883), ('D', 0.0844421582075903), ('E', 0.3196559213534522)]
[('A', 0.06425659198292943), ('B', 0.3406054717268709), ('C', 0.19109129705837524), ('D', 0.08520614235634812), ('E', 0.31884049687547633)]
[('A', 0.06369709901945841), ('B', 0.34025936086978614), ('C', 0.19172159985774526), ('D', 0.08511596301376823), ('E', 0.319205977239242)]
[('A', 0.06390719995258175), ('B', 0.34043834357906144), ('C', 0.19136204677471255), ('D', 0.08513956629240121), ('E', 0.31915284340124306)]
[('A', 0.06378734892490419), ('B', 0.340455243385437), ('C', 0.19152157177372464), ('D', 0.08508974890909811), ('E', 0.3191460870068361)]
[('A', 0.06384052392457489), ('B', 0.3404085366484708), ('C', 0.19149007133435322), ('D', 0.08510297356620962), ('E', 0.3191578945263915)]
[('A', 0.06383002377811774), ('B', 0.34043806916791647), ('C', 0.19148444296576037), ('D', 0.0851101984196427), ('E', 0.31913726566856276)]
[('A', 0.06382814765525345), ('B', 0.3404139402612687), ('C', 0.19149570917666414), ('D', 0.08510482224795936), ('E', 0.3191573806588544)]
[('A', 0.06383190305888804), ('B', 0.3404334298772722), ('C', 0.19148301934905215), ('D', 0.08510795227730586), ('E', 0.3191436954374817)]
[('A', 0.06382767311635072), ('B', 0.34042099645711105), ('C', 0.19149401595826546), ('D', 0.08510497413598007), ('E', 0.31915234033229267)]
[('A', 0.06383133865275516), ('B', 0.34042823137107625), ('C', 0.1914863892673391), ('D', 0.08510722969153874), ('E', 0.31914681101729075)]
[('A', 0.06382879642244636), ('B', 0.34042392390154247), ('C', 0.19149122856978984), ('D', 0.08510590930669808), ('E', 0.3191501417995232)]
[('A', 0.06383040952326328), ('B', 0.340426407273672), ('C', 0.19148822742492003), ('D', 0.08510667499741208), ('E', 0.3191482807807326)]
[('A', 0.06382940914164001), ('B', 0.3404250839551537), ('C', 0.1914900068112571), ('D', 0.08510621231606111), ('E', 0.3191492877758881)]
[('A', 0.06383000227041903), ('B', 0.3404257574897681), ('C', 0.19148901169145685), ('D', 0.08510647198429903), ('E', 0.319148756564057)]
[('A', 0.06382967056381895), ('B', 0.34042542398753), ('C', 0.19148954616835706), ('D', 0.08510633798729196), ('E', 0.31914902129300204)]
[('A', 0.06382984872278569), ('B', 0.3404255781476084), ('C', 0.1914892688483713), ('D', 0.085106405577392), ('E', 0.31914889870384267)]
[('A', 0.06382975628279043), ('B', 0.34042551494477125), ('C', 0.19148940531473274), ('D', 0.085106372523719), ('E', 0.3191489509339866)]
[('A', 0.06382980177157759), ('B', 0.3404255363615834), ('C', 0.19148934289998243), ('D', 0.08510638719917439), ('E', 0.3191489317676822)]
[('A', 0.06382978096666081), ('B', 0.3404255323582081), ('C', 0.19148936877131756), ('D', 0.08510638155718667), ('E', 0.3191489363466269)]
[('A', 0.06382978959043918), ('B', 0.3404255300021805), ('C', 0.19148935983465765), ('D', 0.08510638324599279), ('E', 0.3191489373267299)]
[('A', 0.06382978661155254), ('B', 0.3404255338568763), ('C', 0.19148936153123663), ('D', 0.08510638314169894), ('E', 0.31914893485863555)]
[('A', 0.06382978717707888), ('B', 0.34042553039581974), ('C', 0.19148936246562231), ('D', 0.08510638271426306), ('E', 0.31914893724721594)]
[('A', 0.06382978748854078), ('B', 0.3404255329729089), ('C', 0.19148936092360283), ('D', 0.08510638321423374), ('E', 0.3191489354007137)]
[('A', 0.06382978697453427), ('B', 0.3404255312302273), ('C', 0.19148936231596803), ('D', 0.08510638280404786), ('E', 0.3191489366752225)]
[('A', 0.06382978743865601), ('B', 0.34042553233340056), ('C', 0.19148936127329175), ('D', 0.0851063830968341), ('E', 0.3191489358578175)]
[('A', 0.06382978709109725), ('B', 0.34042553167070283), ('C', 0.1914893619795856), ('D', 0.08510638290398259), ('E', 0.31914893635463165)]
[('A', 0.06382978732652854), ('B', 0.3404255320516641), ('C', 0.19148936153238383), ('D', 0.08510638302356095), ('E', 0.3191489360658626)]
[('A', 0.06382978717746128), ('B', 0.3404255318413721), ('C', 0.19148936180134157), ('D', 0.0851063829529708), ('E', 0.31914893622685425)]
[('A', 0.06382978726711386), ('B', 0.34042553195267466), ('C', 0.19148936164650648), ('D', 0.08510638299293428), ('E', 0.31914893614077067)]
[('A', 0.06382978721550216), ('B', 0.3404255318964753), ('C', 0.19148936173204195), ('D', 0.08510638297120678), ('E', 0.31914893618477375)]
[('A', 0.06382978724401399), ('B', 0.34042553192327446), ('C', 0.19148936168673836), ('D', 0.0851063829825147), ('E', 0.3191489361634584)]
[('A', 0.06382978722891279), ('B', 0.3404255319114631), ('C', 0.1914893617096419), ('D', 0.08510638297691746), ('E', 0.3191489361730647)]
[('A', 0.0638297872365473), ('B', 0.34042553191603564), ('C', 0.19148936169870245), ('D', 0.08510638297951822), ('E', 0.3191489361691963)]
